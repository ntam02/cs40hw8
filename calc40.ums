###     calc40.ums
###     Qihang Yang & Nicolas Tam
###     Apr. 27 2025
###     asmcoding



        .section init
        .temps r6, r7

## fill jumptable here
## All numbers dispatch to push_digit
## All special signs dispatch their block
## All the others dispatch to unknown_char

        r1 := jumptable + 255
fill_unknown_char:
        m[r0][r1] := unknown_char   
        r1 := r1 - 1

        if (r1 >=s jumptable) goto fill_unknown_char using r5

        r1 := jumptable + '9'
        push r4 on stack r2
        r4 := jumptable + '0'
fill_digit_ops:
        m[r0][r1] := push_digit
        r1 := r1 - 1
        if (r1 >=s r4) goto fill_digit_ops using r5
        pop r4 off stack r2

        m[r0][jumptable + ' '] := waiting_loop
        m[r0][jumptable + '\n'] := print_stack
        m[r0][jumptable + '+'] := add_op
        m[r0][jumptable + '-'] := minus_op
        m[r0][jumptable + '*'] := mult_op
        m[r0][jumptable + '/'] := div_op
        m[r0][jumptable + '|'] := or_op
        m[r0][jumptable + '&'] := and_op
        m[r0][jumptable + 'c'] := change_sign
        m[r0][jumptable + '~'] := filp_bits
        m[r0][jumptable + 's'] := swap_two
        m[r0][jumptable + 'd'] := dup_top
        m[r0][jumptable + 'p'] := pop_top
        m[r0][jumptable + 'z'] := reset_all




        .section text

## Invariant: r3 is the pointer of vstack, maintained across the main procedure
## when r3 is used for other purpose, value restored by caller
main:
        push r3 on stack r2             # non-volatile r3 as vstack pointer
        r3 := end_vstack
        push r1 on stack r2             # save return address
        goto waiting linking r1
program_ends:
        pop r5 off stack r2             # get return address back
        pop r3 off stack r2
        goto r5                         # go back to 'halt' in callmain


## waiting, receive command then dispatch
waiting:
        push r1 on stack r2             # save return address
waiting_loop:
        r5 := input()
        if (r5 == 0xFFFFFFFF) goto waiting_eof using r1
        r5 := r5 + jumptable
waiting_back:
        goto m[r0][r5] linking r1       # if not EOF, dispatch to operation
        goto waiting_loop

# if EOF, end program
waiting_eof:
        # need to clean stack before leaving program
        goto reset_all linking r1
        pop r5 off stack r2             # pop the return address pushed at the start of waiting
        goto r5                         # go back to program_ends



## parse one line of command. if digit comes, multiply previous digit then concat current one

entering:
        r5 := input()
        if (r5 == 0xFFFFFFFF) goto waiting_eof using r1
        r5 := r5 + jumptable
        push r4 on stack r2             # use r4 since no temps for ==
        r4 := m[r0][r5]
        if (r4 == push_digit) goto concat_digits using r1
        pop r4 off stack r2
        goto waiting_back

## handle consequent digit input
concat_digits:
        pop r4 off stack r2             # restore r4 from entering
        push r4 on stack r2
        r4 := m[r0][r3]                 # previous number is on stack
        r4 := r4 * 10
        r5 := r5 - jumptable
        r5 := r5 - '0'
        r5 := r5 + r4
        pop r4 off stack r2
        pop stack r3                    # pop old last digit off, push new one below
        push r5 on stack r3
        goto entering
## when entering push_digit, r1 holds return address, but not used when jump back
push_digit:
        r5 := r5 - jumptable            # recover input
        r5 := r5 - '0'                  # strip ascii padding
        push r5 on stack r3
        goto entering



### All calculator operations

add_op:
        push r1 on stack r2
        r5 := r3
        if (r5 == end_vstack) goto stack_underflow_two using r1
        r5 := r3 + 1
        if (r5 == end_vstack) goto stack_underflow_two using r1
        r5 := m[r0][r3 + 1] + m[r0][r3]
        pop stack r3
        pop stack r3
        push r5 on stack r3
        pop r5 off stack r2
        goto r5

minus_op:
        push r1 on stack r2
        r5 := r3
        if (r5 == end_vstack) goto stack_underflow_two using r1
        r5 := r3 + 1
        if (r5 == end_vstack) goto stack_underflow_two using r1
        r5 := m[r0][r3 + 1] - m[r0][r3] using r1
        pop stack r3
        pop stack r3
        push r5 on stack r3
        pop r5 off stack r2
        goto r5

mult_op:
        push r1 on stack r2
        r5 := r3
        if (r5 == end_vstack) goto stack_underflow_two using r1
        r5 := r5 + 1
        if (r5 == end_vstack) goto stack_underflow_two using r1
        push r4 on stack r2
        push r3 on stack r2
        r4 := m[r0][r5]
        r5 := r5 - 1
        r3 := m[r0][r5]

        r1 := r4 * r3
        pop r3 off stack r2
        pop stack r3
        pop stack r3
        push r1 on stack r3
        pop r4 off stack r2
        pop r5 off stack r2
        goto r5

div_op:
        push r1 on stack r2
        r5 := r3
        if (r5 == end_vstack) goto stack_underflow_two using r1
        r5 := r5 + 1
        if (r5 == end_vstack) goto stack_underflow_two using r1
        r5 := r5 - 1
        r1 := m[r0][r5]
        if (r1 == 0) goto division_by_zero
        push r4 on stack r2
        push r3 on stack r2
        r4 := r1
        r5 := r5 + 1
        r3 := m[r0][r5]

        # use r3 and r4 to store 2 value, r3 inner, r4 outer
        if (r3 <s 0) goto div_neg_pos using r1
        if (r4 <s 0) goto div_pos_neg using r1
div_poses:      
        # if both pos, normal div is fine
        r5 := r3 / r4
div_back:
        pop r3 off stack r2     # recover vstack pt
        pop stack r3
        pop stack r3
        push r5 on stack r3     # push outcome to vstack
        pop r4 off stack r2
        pop r5 off stack r2
        goto r5


## if one operand is neg, invert neg one and outcome
div_neg_pos:    # assume r3 is neg
        if (r4 <s 0) goto div_negs using r1
        r3 := - r3
        r5 := r3 / r4   # if the other is pos, just div, then neg outcome
        r5 := - r5
        goto div_back
div_pos_neg:    # assume r4 is neg
        if (r3 <s 0) goto div_negs using r1
        r4 := -r4
        r5 := r3 / r4   # if the other is pos, just div, then neg outcome
        r5 := - r5
        goto div_back
## if both operands are neg, only invert operands
div_negs:
        r3 := - r3
        r4 := - r4
        r5 := r3 / r4
        goto div_back

or_op:
        push r1 on stack r2
        r5 := r3
        if (r5 == end_vstack) goto stack_underflow_two using r1
        r5 := r3 + 1
        if (r5 == end_vstack) goto stack_underflow_two using r1
        r5 := m[r0][r3 + 1] | m[r0][r3] using r1
        pop stack r3
        pop stack r3
        push r5 on stack r3
        pop r5 off stack r2
        goto r5

and_op:
        push r1 on stack r2
        r5 := r3
        if (r5 == end_vstack) goto stack_underflow_two using r1
        r5 := r3 + 1
        if (r5 == end_vstack) goto stack_underflow_two using r1
        r5 := m[r0][r3 + 1] & m[r0][r3]
        pop stack r3
        pop stack r3
        push r5 on stack r3
        pop r5 off stack r2
        goto r5



## change sign of the top item and push it back. 
change_sign:
        push r1 on stack r2
        if (r3 == end_vstack) goto stack_underflow_one using r1
        pop r5 off stack r3
        r5 := - r5
        push r5 on stack r3
        pop r5 off stack r2
        goto r5



## filp bits of the top item and push it back
filp_bits:
        push r1 on stack r2
        r5 := r3
        if (r5 == end_vstack) goto stack_underflow_one using r1
        r5 := m[r0][r3]

        r5 := ~ r5
        
        pop stack r3
        push r5 on stack r3
        pop r5 off stack r2
        goto r5

############## 439  117  sdd *d~*dc704c ################

## swap top two items
swap_two:
        push r1 on stack r2
        r5 := r3
        if (r5 == end_vstack) goto stack_underflow_two using r1
        r5 := r3 + 1
        if (r5 == end_vstack) goto stack_underflow_two using r1
        r5 := m[r0][r3 + 1]
        m[r0][r3 + 1] := m[r0][r3]
        m[r0][r3] := r5
        pop r5 off stack r2
        goto r5

## duplicate top item
dup_top:
        push r1 on stack r2
        if (r3 == end_vstack) goto stack_underflow_one using r1
        r5 := m[r0][r3]
        push r5 on stack r3
        pop r5 off stack r2
        goto r5

## pop a item off stack
pop_top:
        push r1 on stack r2
        r5 := r3
        if (r5 == end_vstack) goto stack_underflow_one using r1
        pop stack r3
        pop r5 off stack r2
        goto r5

## remove all values in stack.
reset_all:
        push r1 on stack r2
reset_loop:
        if (r3 == end_vstack) goto reset_done using r1
        pop stack r3
        goto reset_loop
reset_done:
        pop r5 off stack r2
        goto r5



## print the whole stack after a line is read, triggered by new line character
print_stack:
        push r1 on stack r2
        push r4 on stack r2
        r5 := r3
print_stack_loop:
        r4 := r5
        if (r4 == end_vstack) goto done_print using r1
        r4 := m[r0][r5]
        push r5 on stack r2             # save counter
        push r4 on stack r2             # push r4 as parameter to call printd
        goto printd linking r1
        pop stack r2                    # pop the parameter r4 off
        pop r5 off stack r2
        r5 := r5 + 1
        goto print_stack_loop
done_print:
        pop r4 off stack r2             # recover r4
        pop r5 off stack r2
        goto r5


## called right after r5 reads input
unknown_char:
        push r1 on stack r2
        output "Unknown character "
        output 39                       # single quote
        r5 := r5 - jumptable
        output r5
        output 39
        output '\n'
        pop r5 off stack r2
        goto r5


  
stack_underflow_two:
        output "Stack underflow---expected at least 2 elements\n"
        pop r5 off stack r2
        goto r5

stack_underflow_one:
        output "Stack underflow---expected at least 1 element\n"
        pop r5 off stack r2
        goto r5

division_by_zero:
        output "Division by zero\n"
        pop r5 off stack r2
        goto r5








        .section rodata
jumptable:
        .space 256